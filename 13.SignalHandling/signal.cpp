/*Theory @ 
https://www.javatpoint.com/cpp-signal-handling
https://www.tutorialspoint.com/c_standard_library/c_function_raise.htm
https://www.tutorialspoint.com/c_standard_library/c_function_signal.htm
Signals are the interrupts which are delivered to a process by the operating system to stop its ongoing task and attend the task for which the interrupt has been generated.
Signals can also be generated by the operating system on the basis of system or error condition.

singnal numbers:
raise(2) = raise(SIGINT) 
raise(1) = Hangup
raise(3) = Quit (core dumped)   
raise(4) = raise (SIGILL) Illegal instruction (core dumped)
raise(5) = Trace/breakpoint trap (core dumped)
raise(6) = Aborted (core dumped)
raise(7) = Bus error (core dumped)
raise(8) = Floating point exception (core dumped)
raise(9) = Killed
raise(10) = User defined signal 1
*/

#include <iostream>  
#include <csignal>  
#include <unistd.h>

using namespace std;  
    
/* Signal interrupt handler */
void handler(int sig)  
{cout << "Signal interrupt handled SigNr.:" << sig << endl ;  
 exit(1);
}  

/* Signal:10 User defined handler */
void handler_UserDefined(int sig)  
{cout << "Signal is User defined handled SigNr.:" << sig << endl ;  
 //exit(0);
}  
  
int main()  
{signal(SIGINT, handler);  // it is the declaration for signal() function.
                           // SIGINT (Signal Interrupt) Interactive attention signal. Generally generated by the application user.                           
 signal(10, handler_UserDefined);  // it is the declaration for signal() function.                           
 while(1) 
 {printf("Going to sleep for a second...\n");
  sleep(1); 
  printf("Going to sleep for a second...\n");
  sleep(1); 
  raise(10); 
  raise(SIGINT); // 
  //raise(2); 
  } 
 return 0;  
}  






